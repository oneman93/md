<!-- 
    See documentation md.htm.md
-->
<html lang="en-us">

    <head>
        <script type="module" src="https://cdn.jsdelivr.net/gh/zerodevx/zero-md@2/dist/zero-md.min.js"></script>

        <!-- Todo: convert to local cdn -->
        <!-- <script src="./md/zero-md-main/dist/zero-md.min.js"></script> -->

        <script src="https://code.jquery.com/jquery-3.6.1.min.js"
            integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
        <link rel="stylesheet" href="md-custom.css" />

        <!-- These two stylesheets were created by zero-md dynamically under shadow root: #shadow-root
        I copied here manually to use with <zero-md-clone></zero-md-clone> -->

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/PrismJS/prism@1/themes/prism.min.css">

        <meta charset="utf-8">
        <title>md.htm</title>
    </head>

    <body>
        <div class="search-wrapper mb-5">
            <input id="inputSearch" type="text" placeholder="type to search..." />
            <button id="btnReset" type="button" class="btn btn-primary btn-sm">Reset</button>
        </div>
        <div style="width:70%; margin:0 auto; margin-top: 50px;" id="mdcontainer">
        </div>
    </body>

    <script>
        function getQuery(key) {
            var query = window.location.search.substring(1);
            var key_values = query.split("&");
            var params = {};
            key_values.map(function (key_val) {
                var key_val_arr = key_val.split("=");
                params[key_val_arr[0]] = key_val_arr[1];
            });
            if (typeof params[key] != "undefined") {
                return params[key];
            }
            return "";
        }



        window.onload = function () {
            md = document.createElement("zero-md")
            md.setAttribute("src", getQuery("src"))
            md.setAttribute("no-shadow", "")
            document.getElementById("mdcontainer").append(md)

            // my code trial begins ----
            const app = document.querySelector('zero-md')
            const run = async () => {
                console.log('app.src: ', app.src);

                if (app.src == '') {
                    app.src = '../_work_index.md';
                }

                // Without this line, clone was not working.
                await app.render({
                    // The class `line-numbers` will be added to the markdown-body container
                    classes: 'line-numbers',
                    // These are Marked options (moh, 13/12/22, commented to render table correclty.)
                    // gfm: false,
                    // mangle: false
                })

                // Debug to see original DOM tags right after zero-md.
                // return;

                //-----------------------------
                // Clone starts from here
                //-----------------------------                

                var mdStyle = app.shadowRoot.childNodes[0];
                var mdBody = app.shadowRoot.childNodes[1];
                console.log('mdBody:', mdBody);

                //-----------------------------
                // Add keyup etc event listener
                //-----------------------------
                const inputSearch = document.getElementById("inputSearch");
                const btnReset = document.getElementById("btnReset");
                inputSearch.addEventListener("keyup", searchText);
                btnReset.addEventListener("click", resetText);

                //-----------------------------
                // Move html elements to clone node because you cannot play shadow doms with jQuery
                //-----------------------------
                // $(app).hide();   // didn't work, don't know why.
                $(app).addClass('invisible');
                mdClone = document.createElement("zero-md-clone");
                mdClone.append(mdBody);
                document.getElementById("mdcontainer").append(mdClone)

                inputSearch.focus();
                // Retrieve search text on page load
                inputSearch.value = localStorage.getItem("search-text");
                searchText();

                // On keyup, search html
                function searchText() {
                    var input, filter, ul, tags, a, i, txtValue, elem;
                    filter = inputSearch.value.toUpperCase();

                    // Set Item (otherwise, chrome refreshes it.)
                    localStorage.setItem("search-text", filter);

                    if (filter == "") {
                        $('[style*="display: none"]').slideDown();
                        $('.btn-sm').not('#btnReset').remove();
                        return;
                    }

                    // Todo: make it better to: 
                    // (1) show entire h1 paragraph by adding 'Show all' button to h1, h2, ul 
                    // (2) higlight text
                    tags = mdClone.querySelectorAll("h1,h2,li");

                    // All other tags will be hidden unless filter is reset to "".
                    var otherTags = mdClone.querySelectorAll("table,pre,p");
                    $(otherTags).hide();

                    console.log('tags length: ', tags.length);
                    for (i = 0; i < tags.length; i++) {
                        elem = tags[i];
                        var elemTagName = elem.tagName;
                        txtValue = elem.textContent || elem.innerText;

                        if (txtValue.toUpperCase().indexOf(filter) >= 0) {
                            // filtered by search
                            $(elem).slideDown();
                            if (elemTagName == "H1" || elemTagName == "H2") {

                                var btnExpand = $(elem).next('.btn-sm');
                                if (btnExpand.length <= 0) {
                                    let btn = document.createElement('button');
                                    btn.innerHTML = "Expand";
                                    btn.classList.add("btn", "btn-sm");
                                    if (elemTagName == "H1") {
                                        btn.classList.add("btn-success");  // green expand button
                                    } else {
                                        btn.classList.add("btn-info");  // light blue
                                    }

                                    btn.addEventListener("click", function () {
                                        var prev = $(this).prev();
                                        if ($(prev).prop('tagName') == 'H1') {
                                            //h1
                                            $(this).prev('h1').nextUntil('h1').each(function (index) {
                                                $(this).slideDown();
                                                if ($(this).prop('tagName') == 'UL') {
                                                    $(this).find('li').slideDown();
                                                }
                                            });
                                        }
                                        else {
                                            //h2
                                            $(this).prev('h2').nextUntil(':header').each(function (index) {
                                                $(this).slideDown();
                                                if ($(this).prop('tagName') == 'UL') {
                                                    $(this).find('li').slideDown();
                                                }
                                            });

                                        }
                                        $(this).remove();
                                    });
                                    insertAfter(elem, btn);
                                }
                            } else if (elemTagName == "LI") {
                                // LI
                                var h1 = $(elem).closest('ul').prev('h1');
                                if (h1.length > 0 && !h1.is(':visible')) {
                                    var btnExpand = h1.next('.btn-sm');
                                    if (btnExpand.length <= 0) {
                                        let btn = document.createElement('button');
                                        btn.innerHTML = "Expand";
                                        btn.classList.add("btn", "btn-sm", "btn-info");     // light-blue expand button
                                        btn.addEventListener("click", function () {
                                            // alert("Button is clicked");
                                            $(this).prev('h1').slideDown();
                                            $(this).prev('h1').nextUntil('h1').each(function (index) {
                                                $(this).slideDown();
                                                if ($(this).prop('tagName') == 'UL') {
                                                    $(this).find('li').slideDown();
                                                }
                                            });
                                            $(this).remove();
                                        });
                                        insertAfter(h1.get(0), btn);
                                    }
                                }
                            }
                        } else {
                            // elem doesn't contain search string
                            $(elem).hide();
                            $(elem).next('.btn-sm').remove();
                        }
                    }
                }

                function resetText() {
                    inputSearch.value = "";
                    searchText();
                }

                function insertAfter(referenceNode, newNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }
            }

            run()

        } //window.load
    </script>

</html>