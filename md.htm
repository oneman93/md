<!-- 
    See documentation md.htm.md
-->
<html lang="en-us">

    <head>
        <script type="module" src="https://cdn.jsdelivr.net/gh/zerodevx/zero-md@2/dist/zero-md.min.js"></script>

        <!-- Todo: convert to local cdn -->
        <!-- <script src="./md/zero-md-main/dist/zero-md.min.js"></script> -->

        <script src="https://code.jquery.com/jquery-3.6.1.min.js"
            integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>

        <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"> -->

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
            integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">


        <link rel="stylesheet" href="md-custom.css" />
        <link rel="stylesheet" href="github.css" />

        <!-- These two stylesheets were created by zero-md dynamically under shadow root: #shadow-root
        I copied here manually to use with <zero-md-clone></zero-md-clone> -->

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/PrismJS/prism@1/themes/prism.min.css">

        <!-- fontawsome -->
        <script src="https://kit.fontawesome.com/33b67b9684.js" crossorigin="anonymous"></script>

        <meta charset="utf-8">
        <title>md.htm</title>
        <link rel="icon" type="image/x-icon" href="/md/images/favicon.png">

        <!-- photo swipe -->
        <script type="module">
            import PhotoSwipeLightbox from './dist/photoswipe-lightbox.esm.js';

            const options = {
                gallery: '#mdcontainer',
                children: 'a.photoswipe',
                pswpModule: () => import('./dist/photoswipe.esm.js')
            };
            const lightbox = new PhotoSwipeLightbox(options);
            lightbox.on('uiRegister', function () {
                lightbox.pswp.ui.registerElement({
                    name: 'custom-caption',
                    order: 9,
                    isButton: false,
                    appendTo: 'root',
                    html: 'Caption text',
                    onInit: (el, pswp) => {
                        lightbox.pswp.on('change', () => {
                            const currSlideElement = lightbox.pswp.currSlide.data.element;
                            let captionHTML = '';
                            if (currSlideElement) {
                                const hiddenCaption = currSlideElement.querySelector('.hidden-caption-content');
                                if (hiddenCaption) {
                                    // get caption from element with class hidden-caption-content
                                    captionHTML = hiddenCaption.innerHTML;
                                } else {
                                    // get caption from alt attribute
                                    captionHTML = currSlideElement.querySelector('img').getAttribute('title');
                                }
                            }
                            el.innerHTML = captionHTML || '';
                        });
                    }
                });
            });
            lightbox.init();
        </script>

        <link rel="stylesheet" href="./dist/photoswipe.css">

        <!-- jspdf -->
        <script src="./dist/jspdf/jspdf-251.js"></script>
        <script src="./dist/jspdf/html2canvas.js"></script>

    </head>

    <body>
        <div class="search-wrapper d-flex justify-content-between">
            <DIV id="divLeft">
                <input id="inputSearch" type="text" placeholder="type to search..." />
                <button id="btnReset" type="button" class="btn btn-primary btn-sm">Reset</button>
                <button id="btnHome" type="button" class="btn btn-danger btn-sm">
                    <span style="font-size: 1em;color:white;"><i class="fa-solid fa-house"></i></span>
                    Go Home</button>


            </DIV>
            <DIV id="divRight">


                <a id="btnLocalVideos" type="button" class="btn btn-info btn-sm"
                    href="https://laureateaus-my.sharepoint.com/personal/matthew_oh_torrens_edu_au/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fmatthew%5Foh%5Ftorrens%5Fedu%5Fau%2FDocuments%2FLocalVideos&view=0">
                    Local Videos</a>



                <button id="btnWrapIt" type="button" class="btn btn-primary btn-sm">Wrap with md.htm</button>

                <button id="btnCopy" type="button" class="btn btn-primary btn-sm" onclick="CopyHTMLToClipboard()">
                    Copy</button>
                <button id="btnCopyPath" type="button" class="btn btn-secondary btn-sm" onclick="CopyFilePath()">
                    Copy Md Path</button>

                <button id="btnImageFolder" type="button" class="btn btn-primary btn-sm invisible">
                    <span style=" font-size: 1em;color:white;"><i class="fa-solid fa-folder"></i></span>
                    Copy</button>

                <button id="btnPDF" type="button" class="btn btn-dark btn-sm">PDF</button>

                <button id="btnH1Only" type="button" class="btn btn-primary btn-sm">Show H1 Only</button>

            </DIV>

        </div>

        <div id="mdcontainer" style="width:70%; margin:0 auto; margin-top: 50px;">
            <!-- shadow dom will be cloned here -->
        </div>

        <!-- Toast notification container -->
        <div class="toast-container" id="toastContainer"></div>

        <!-- Floating Table Navigation -->
        <div class="table-nav-container" id="tableNavContainer">
            <div class="table-nav-title">Tables</div>
            <div id="tableNavButtons"></div>
        </div>



    </body>

    <script>
        // Local storage variables
        var _clickHistory = "ls-click-history";
        var _expandedNth = "ls-expanded-nth";
        var _searchText = "ls-search-text";
        var _isWrapped = "ls-is-wrapper";

        // File paths
        var indexMdFile = '../_work-index.md';

        var specialElementHandlers = {
            '#editor': function (element, renderer) {
                return true;
            }
        };

        // Toast notification function
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;

            toastContainer.appendChild(toast);

            // Trigger animation
            setTimeout(() => {
                toast.classList.add('show');
            }, 10);

            // Remove toast after 6 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 6000);
        }

        //https://stackoverflow.com/questions/12982156/select-copy-text-using-javascript-or-jquery
        function CopyHTMLToClipboard() {
            //Before we copy, we are going to select the text.
            var text = document.getElementById('mdcontainer');
            var selection = window.getSelection();
            var range = document.createRange();
            range.selectNodeContents(text);
            selection.removeAllRanges();
            selection.addRange(range);
            //add to clipboard.
            document.execCommand('copy');
            document.execCommand("UnSelect", true);
            showToast('HTML content copied to clipboard!');
        }

        // Copy file path function
        function CopyFilePath() {
            const currentPath = window.location.href;
            navigator.clipboard.writeText(currentPath).then(() => {
                showToast(`File path copied: ${currentPath}`);
            }).catch(() => {
                showToast('Failed to copy path', 'error');
            });
        }

        // Table Navigation Functions
        function createTableNavigation() {
            const container = document.getElementById('tableNavContainer');
            const buttonsContainer = document.getElementById('tableNavButtons');

            // Clear existing buttons
            buttonsContainer.innerHTML = '';

            // Find all H1 and H2 elements that have tables as siblings or descendants
            const headingsWithTables = [];

            // Check H1 elements
            document.querySelectorAll('h1').forEach((heading, index) => {
                if (hasTableAfterHeading(heading)) {
                    // Add ID if it doesn't exist
                    if (!heading.id) {
                        heading.id = `table-heading-h1-${index}`;
                    }
                    headingsWithTables.push({
                        element: heading,
                        text: heading.textContent.trim(),
                        id: heading.id,
                        level: 1
                    });
                }
            });

            // Check H2 elements
            document.querySelectorAll('h2').forEach((heading, index) => {
                if (hasTableAfterHeading(heading)) {
                    // Add ID if it doesn't exist
                    if (!heading.id) {
                        heading.id = `table-heading-h2-${index}`;
                    }
                    headingsWithTables.push({
                        element: heading,
                        text: heading.textContent.trim(),
                        id: heading.id,
                        level: 2
                    });
                }
            });

            // Create buttons for each heading with tables
            if (headingsWithTables.length > 0) {
                headingsWithTables.forEach(heading => {
                    const button = document.createElement('button');
                    button.className = 'table-nav-button';
                    button.textContent = heading.text;
                    button.onclick = () => scrollToElement(heading.id);
                    buttonsContainer.appendChild(button);
                });

                // Show the container
                container.classList.add('show');
            } else {
                // Hide the container if no tables found
                container.classList.remove('show');
            }
        }

        function hasTableAfterHeading(heading) {
            let nextElement = heading.nextElementSibling;

            // Check the next few siblings for a table
            let checkCount = 0;
            while (nextElement && checkCount < 10) {
                if (nextElement.tagName === 'TABLE') {
                    return true;
                }

                // Also check if there's a table inside the next element
                if (nextElement.querySelector && nextElement.querySelector('table')) {
                    return true;
                }

                // Stop if we hit another heading
                if (nextElement.tagName === 'H1' || nextElement.tagName === 'H2' || nextElement.tagName === 'H3') {
                    break;
                }

                nextElement = nextElement.nextElementSibling;
                checkCount++;
            }

            return false;
        }

        function scrollToElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });

                // Optional: highlight the heading briefly
                element.style.backgroundColor = '#fff3cd';
                setTimeout(() => {
                    element.style.backgroundColor = '';
                }, 2000);
            }
        }

        function getQuery(key) {
            var query = window.location.search.substring(1);
            var key_values = query.split("&");
            var params = {};
            key_values.map(function (key_val) {
                var key_val_arr = key_val.split("=");
                params[key_val_arr[0]] = key_val_arr[1];
            });
            if (typeof params[key] != "undefined") {
                return params[key];
            }
            return "";
        }

        // Prevent chrome auto page refresh
        // https://stackoverflow.com/questions/58118286/how-to-prevent-page-refresh-or-default-prompt-box-in-chrome
        // 2/11/23, Disabled to remove Leave Site? popup.
        // https://superuser.com/questions/705307/how-can-i-disable-are-you-sure-you-want-to-leave-this-page-popups-in-chrome

        // window.addEventListener("beforeunload", function (e) {
        //     // Do something
        //     console.log('chrome auto refresh blocked.');
        //     e.preventDefault();
        // }, false);

        window.onload = function () {
            md = document.createElement("zero-md")
            md.setAttribute("src", getQuery("src"))
            md.setAttribute("no-shadow", "")
            document.getElementById("mdcontainer").append(md)

            // my code trial begins ----
            const app = document.querySelector('zero-md')
            const run = async () => {

                const _url = window.location.href;
                console.log('app.src: ', app.src);

                if (app.src == '') {
                    app.src = indexMdFile;
                }

                var isRootPage = false;
                if (app.src.toLowerCase() == indexMdFile) {
                    isRootPage = true;

                    $('#btnHome').addClass('invisible');
                    const homeIcon = '<span style="font-size: 1em;color:blue;"><i class="fa-solid fa-house"></i></span>';
                    $('#divLeft').append(homeIcon);
                    $('#mdcontainer').addClass('work-index');
                }

                // Set document title - will be updated later if outline content exists
                document.title = app.src.toLowerCase().replace('../', '').replace('./', '').replace('_loadingdocuments/', '');


                console.log('isRootPage:', isRootPage, ',app.src:', app.src);

                // Without this line, clone was not working.
                await app.render({
                    // The class `line-numbers` will be added to the markdown-body container
                    classes: 'line-numbers',
                    // These are Marked options (moh, 13/12/22, commented to render table correclty.)
                    // gfm: false,
                    // mangle: false
                })

                // Check file exists
                UrlExists(app.src);

                // Uncomment below to see original DOM tags right after zero-md.
                //return;

                //-----------------------------
                // Clone starts from here
                //-----------------------------                

                var mdStyle = app.shadowRoot.childNodes[0];
                var mdBody = app.shadowRoot.childNodes[1];
                console.log('mdBody:', mdBody);

                // Add keyup etc event listener
                const inputSearch = document.getElementById("inputSearch");
                const btnHome = document.getElementById("btnHome");
                const btnReset = document.getElementById("btnReset");
                const btnWrapIt = document.getElementById("btnWrapIt");
                const btnPDF = document.getElementById("btnPDF");
                const btnH1Only = document.getElementById("btnH1Only");

                //-----------------------------
                // Event Handler
                //-----------------------------  
                // On keyup, search!
                inputSearch.addEventListener("keyup", searchText);
                btnHome.addEventListener("click", goHome);
                btnReset.addEventListener("click", resetText);
                btnWrapIt.addEventListener("click", toggleWrap);
                btnPDF.addEventListener("click", convert2PDF);
                btnH1Only.addEventListener("click", toggleH1Only);



                //-----------------------------
                // ChangeBody start: move html elements to clone node because you cannot play shadow doms with jQuery
                //-----------------------------
                // debugger;
                // Hide zero-md
                $(app).addClass('invisible');
                mdClone = document.createElement("zero-md-clone");

                //mdClone.append(mdBody);
                var div = changeBody();
                mdClone.append(div);
                document.getElementById("mdcontainer").append(mdClone);
                // Now it shows zero-md-clone

                //---------------
                // Page Load
                //----------------
                // To use bootstrap/github css + apply custom css
                $('table').addClass('table');
                $('div.all').addClass('markdown-body');
                applyCustomCss();

                addImageFolderButton();
                inputSearch.focus();

                // Create table navigation buttons
                createTableNavigation();

                //-----------------------------
                // ChangeBody done.
                //-----------------------------

                // Button `Wrap with md.htm` clicked already?
                var isWrapped = localStorage.getItem(_isWrapped);
                if (isWrapped == "1") {
                    wrapWithMdHtml();
                }

                var strNth = localStorage.getItem(_expandedNth);
                console.log('strNth:', strNth);

                if (strNth != null) {
                    var nthArray = strNth.split(',');
                    nthArray.forEach(expandFunction)

                    // Remember expanded button status in local storage. Keep it expanded when the page is refreshed.
                    function expandFunction(item) {
                        var selector = '.h1-wrapper:nth-child(#n)'.replace('#n', parseInt(item));
                        // console.log('selector:', selector);

                        var btnExpand = $(selector).find('.btn-ex-collapse');
                        if (btnExpand.length) {
                            btnExpand.click();    // dangerous, but it seems I did this for initial expanding.
                        }
                    }

                }

                // Retrieve search text on page load
                // This part should be positioned here at the last. Otherwise, folding/unfolding will show override search result.
                inputSearch.value = localStorage.getItem(_searchText);
                if (isRootPage) {
                    // Apply filter only in root page.
                    searchText();
                }

                //-----------------------
                // FUNCTIONS
                //-----------------------

                function addImageFolderButton() {
                    // 1. clone copy button
                    // 2. append it beside image
                    const btnClone = $('#btnImageFolder').clone();

                    btnClone.removeAttr('id');
                    btnClone.addClass('btn-image-folder');
                    btnClone.removeClass('btn-primary invisible').addClass('btn-secondary');
                    btnClone.html(btnClone.html().replace('Copy', ''));
                    // no text just image button

                    document.addEventListener("click", function (e) {
                        const target = e.target.closest(".btn-image-folder"); // Or any other selector.
                        if (target) {
                            // Do something with `target`.
                            copyImageFolderPathToClipboard(target);
                            $(target).after('<span class="copied"> Copied</span>');
                            setTimeout(function () {
                                $('.copied').remove();
                            }, 1000);
                        }
                    });

                    $('p').find('img:last').after(btnClone);
                }

                // Change mdBody structure nested from plain
                // Before: <h1/> <ul/> <h2/> <h1/>
                // After: <h1><ul/><h2></h1> <h1></h1>
                function changeBody() {
                    // To help search result better, add some css class for h1, h2
                    console.log('length', $(mdBody).find('h1').length);

                    var divAll = document.createElement("div");
                    divAll.classList.add('all');

                    // `Document start ~ first h1` was not be shown in <zero-md-clone>
                    var noTagElems = $(mdBody).html().split('<h1')[0];
                    if (noTagElems.length > 0 && !noTagElems.startsWith('<h1')) {
                        //console.log('noTagElems:', noTagElems);

                        // Extract first line to create a title h1
                        var tempDiv = document.createElement('div');
                        tempDiv.innerHTML = noTagElems;
                        var firstLine = tempDiv.textContent.trim().split('\n')[0];

                        var h1Wrapper = document.createElement("div");
                        h1Wrapper.className = 'h1-wrapper';

                        if (firstLine && firstLine.length > 0) {
                            // Create title h1 from first line and remove it from the content
                            var remainingContent = noTagElems.replace(firstLine, '').trim();
                            // Remove empty <li> elements
                            if (remainingContent) {
                                var tempContentDiv = document.createElement('div');
                                tempContentDiv.innerHTML = remainingContent;
                                var lis = tempContentDiv.querySelectorAll('li');
                                lis.forEach(function (li) {
                                    if (!li.textContent.trim()) {
                                        li.remove();
                                    }
                                });
                                remainingContent = tempContentDiv.innerHTML;
                            }
                            h1Wrapper.innerHTML = '<h1>' + firstLine + '</h1>' + (remainingContent ? remainingContent : '');
                        } else {
                            h1Wrapper.innerHTML = '<h1>Outline</h1>' + noTagElems;
                        }
                        if (fnIsRootPage()) {
                            // + '<button class="btn btn-sm btn-danger" onclick="RemoveButtonClicked()">Remove</button>'
                            var btnx = '<button class="close" aria-label="Close" onclick="RemoveHistoryItem()"><span aria-hidden="true">&times;</span></button>';

                            h1Wrapper.innerHTML = '<h1 id="h1Recent">Recently viewed ...'
                                + btnx
                                + '</h1>'
                                + getHistoryArrayHtml();
                        }
                        divAll.append(h1Wrapper);
                    }

                    // The entire document will be restructured by <h1> tag.
                    $(mdBody).find('h1').each(function () {
                        var h1Wrapper = document.createElement("div");
                        h1Wrapper.className = 'h1-wrapper';

                        var clone = this.cloneNode(true);       //add current h1 into div.h1-wrapper
                        h1Wrapper.append(clone);

                        // add all the following elems until next h1 into div.h1-wrapper
                        $(this).nextUntil('h1').each(function () {
                            clone = this.cloneNode(true);
                            h1Wrapper.append(clone);
                        });
                        divAll.append(h1Wrapper);
                    });

                    console.log('all', divAll);
                    return divAll;
                }

                function applyCustomCss() {
                    $('a').each(function () {
                        var txtOrg = $(this).text().toLowerCase();
                        var boldWords = ["loading", "summary", "itwiki", "release"];
                        var orangeWords = ["bau"];

                        // console.log('searchWord:', searchWord);
                        // console.log('txtOrg:', txtOrg);

                        // Note that below style will be overwritten by the last if.
                        boldWords.forEach((elem) => {
                            if (txtOrg.indexOf(elem) >= 0) {
                                // add green css
                                var txtReplaced = txtOrg.replace(elem, `<span class="green">${elem}</span>`);
                                $(this).html(txtReplaced);
                            }
                        });

                        orangeWords.forEach((elem) => {
                            if (txtOrg.indexOf(elem) >= 0) {
                                // add green css
                                var txtReplaced = txtOrg.replace(elem, `<span class="orange">${elem}</span>`);
                                $(this).html(txtReplaced);
                            }
                        });
                    });

                }


                //---------------------
                // On keyup, search    
                //---------------------             
                function searchText() {

                    var input, filter, ul, tags, a, i, txtValue, elem;
                    filter = inputSearch.value.toUpperCase();

                    // Save search text (otherwise, chrome refreshes it.)
                    localStorage.setItem(_searchText, filter);

                    // 13/1/25 i don't like it anymore because it nullifies loading css etc >> commented
                    //applyHighlightCss();

                    // But search is available only in home page
                    if (!fnIsRootPage()) return;

                    if (filter == "") {
                        // Reset button clicked >> show all content
                        $('#mdcontainer').find('[style*="display: none"]').slideDown();
                        $('.btn-expand').remove();
                        return;
                    }

                    // Todo: make it better to: 
                    // (1) show entire h1 paragraph by adding 'Show all' button to h1, h2, ul 
                    // (2) higlight text
                    tags = mdClone.querySelectorAll("h1,h2,li");

                    // All other tags will be hidden unless filter is reset to "".
                    var otherTags = mdClone.querySelectorAll("table,pre");
                    $(otherTags).hide();

                    console.log('tags length: ', tags.length);
                    for (i = 0; i < tags.length; i++) {
                        elem = tags[i];
                        var elemTagName = elem.tagName;
                        txtValue = elem.textContent || elem.innerText;
                        var searchMatching = txtValue.toUpperCase().indexOf(filter) >= 0;

                        if (searchMatching) {
                            //$(elem).addClass('highlight');
                            //console.log('txtValue', txtValue);
                            var div = $(elem).closest('.h1-wrapper');

                            // elem is matching with search criteria
                            $(elem).slideDown();
                            if (elemTagName != "H1") {
                                // h2, li matching
                                var h1 = div.find('h1');
                                if (!h1.is(':visible')) {
                                    h1.show();
                                }
                            }

                            // Show button
                            var btnExpand = div.find('.btn-ex-collapse');


                            //------------------
                            // btnExpand
                            //------------------
                            if (btnExpand.length <= 0) {
                                // if button does not exist, create one.
                                let btn = document.createElement('button');
                                btn.innerHTML = "Expand";
                                btn.classList.add("btn", "btn-sm", "btn-expand", "btn-success", "btn-ex-collapse");  // green expand button
                                btn.addEventListener("click", function () {

                                    var isExpand = this.innerHTML == 'Expand';
                                    console.log('isExpand', isExpand);
                                    console.log('yo, li');
                                    // find more than one level
                                    // https://stackoverflow.com/questions/7648761/how-to-select-all-children-in-any-level-from-a-parent-in-jquery

                                    // Have to define again here.
                                    var div = $(this).closest('.h1-wrapper');
                                    var children = div.find('*');
                                    console.log('children', children.length);

                                    //https://stackoverflow.com/questions/13550079/how-to-find-nth-element-when-a-click-is-activated
                                    var divs = $('.h1-wrapper');
                                    var divIndex = divs.index(div);

                                    if (isExpand) {
                                        // Expand button clicked
                                        children.slideDown();
                                        btn.innerHTML = 'Collapse';
                                        btn.classList.remove('btn-success');
                                        btn.classList.add('btn-danger');

                                        var strArray = localStorage.getItem(_expandedNth);
                                        var array = [];
                                        if (strArray != null) {
                                            array = strArray.split(',').map(function (item) {
                                                return parseInt(item, 10);
                                            });
                                        }
                                        console.log('array:', array);
                                        console.log('divIndex:', divIndex);

                                        var nth = divIndex + 1;
                                        if (!array.includes(nth)) {
                                            array.push(nth);
                                            localStorage.setItem(_expandedNth, array.toString());
                                        }

                                    } else {
                                        // Collapse button clicked
                                        searchText();
                                        btn.innerHTML = 'Expand';
                                        btn.classList.add('btn-success');
                                        btn.classList.remove('btn-danger');

                                        localStorage.removeItem(_expandedNth);
                                    }
                                });
                                div.find('h1').append(btn);
                            }

                        } else {
                            // elem doesn't contain search string
                            $(elem).hide();
                        }
                    }
                }

                function applyHighlightCss() {
                    // var searchWord = $('#inputSearch').val().toLowerCase();   //was empty. didn't work
                    var searchWord = localStorage.getItem(_searchText).toLowerCase();
                    console.log('searchWord:', searchWord);

                    if (searchWord == "") {
                        $('a').each(function () {
                            var ctrl = $(this);
                            console.log('html1:', ctrl.html());
                            // remove span
                            if (ctrl.find('.highlight').length > 0) {
                                removeHighlightCss(ctrl);
                            }
                        });
                        applyCustomCss();
                    }
                    else {
                        $('a').each(function () {
                            var txtOrg = $(this).text().toLowerCase();
                            var ctrl = $(this);

                            if (txtOrg.indexOf(searchWord) >= 0) {
                                // console.log('txtOrg:', txtOrg);
                                var txtReplaced = txtOrg.replace(searchWord, `<span class="highlight">${searchWord}</span>`);
                                ctrl.html(txtReplaced);
                            } else {
                                removeHighlightCss(ctrl);
                            }

                        });
                    }
                }

                function removeHighlightCss(ctrl) {
                    // var txtReplaced = ctrl.html().replace(`<span class="highlight">${searchWord}</span>`, searchWord);
                    // above didn't work with fast typing search.

                    var spanRawText = ctrl.find('.highlight').text();
                    ctrl.find('.highlight').replaceWith(spanRawText);
                }

                // Copied from searchText()
                function showH1Only() {

                    var input, filter, ul, tags, a, i, txtValue, elem;
                    tags = mdClone.querySelectorAll("h1");

                    // All other tags will be hidden unless filter is reset to "". 24/10/24, img added.
                    var otherTags = mdClone.querySelectorAll("table,pre,h2,li,img");
                    $(otherTags).hide();

                    console.log('tags length: ', tags.length);
                    for (i = 0; i < tags.length; i++) {
                        elem = tags[i];
                        var elemTagName = elem.tagName;
                        txtValue = elem.textContent || elem.innerText;

                        var div = $(elem).closest('.h1-wrapper');

                        // elem is matching with search criteria
                        $(elem).slideDown();
                        if (elemTagName != "H1") {
                            // h2, li matching
                            var h1 = div.find('h1');
                            if (!h1.is(':visible')) {
                                h1.show();
                            }
                        }

                        // Show button
                        var btnExpand = div.find('.btn-ex-collapse');

                        //------------------
                        // btnExpand
                        //------------------
                        if (btnExpand.length <= 0) {
                            // if button does not exist, create one.
                            let btn = document.createElement('button');
                            btn.innerHTML = "Expand";
                            btn.classList.add("btn", "btn-sm", "btn-expand", "btn-success", "btn-ex-collapse");  // green expand button
                            btn.addEventListener("click", function () {

                                var isExpand = this.innerHTML == 'Expand';
                                console.log('isExpand', isExpand);
                                console.log('yo, li');
                                // find more than one level
                                // https://stackoverflow.com/questions/7648761/how-to-select-all-children-in-any-level-from-a-parent-in-jquery

                                // Have to define again here.
                                var div = $(this).closest('.h1-wrapper');
                                var children = div.find('*');
                                console.log('children', children.length);

                                //https://stackoverflow.com/questions/13550079/how-to-find-nth-element-when-a-click-is-activated
                                var divs = $('.h1-wrapper');
                                var divIndex = divs.index(div);

                                if (isExpand) {
                                    // Expand button clicked
                                    children.slideDown();
                                    btn.innerHTML = 'Collapse';
                                    btn.classList.remove('btn-success');
                                    btn.classList.add('btn-danger');

                                } else {
                                    // Collapse button clicked
                                    searchText();
                                    btn.innerHTML = 'Expand';
                                    btn.classList.add('btn-success');
                                    btn.classList.remove('btn-danger');
                                }
                            });
                            div.find('h1').append(btn);
                        }


                    }
                }


                function resetText() {
                    inputSearch.value = "";
                    searchText();
                }

                function goHome() {
                    // Reset search box when you come back from subpage to homepage
                    // localStorage.removeItem(_searchText);
                    // inputSearch.value = localStorage.getItem(_searchText);

                    location.href = 'http://127.0.0.1:' + window.location.port + '/md/md.htm';
                }

                //moh, 13/3/25, no one seems to call this.
                //https://webdeveloper.com/community/60349-is-there-a-way-to-simulate-ctrl-a-ctrl-c-in-javascript/
                function copyToClipboard() {
                    document.execCommand("SelectAll", true);
                    document.execCommand("Copy", true);
                    alert('Copied');
                }

                function copyImageFolderPathToClipboard(btnClicked) {
                    var folder = 'C:\\Works\\';
                    var imgLast = $(btnClicked).closest('p').find('img:last');
                    var imgPath = imgLast.attr('src').replace('http://', '').replace('https://', '');
                    var words = imgPath.split('/');
                    words.shift();
                    words.pop();

                    var resFolderPath = folder + words.toString().replaceAll(',', '\\').replaceAll('.\\', '').replaceAll('%20', ' ');
                    console.log('resFolderPath', resFolderPath);
                    navigator.clipboard.writeText(resFolderPath);
                }

                function insertAfter(referenceNode, newNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }

                function toggleWrap() {
                    var isWrapped = localStorage.getItem(_isWrapped);
                    if (isWrapped != '1') {
                        wrapWithMdHtml();
                        localStorage.setItem(_isWrapped, '1');
                    } else {
                        unWrapWithMdHtml();
                        localStorage.setItem(_isWrapped, '0');
                    }
                }

                function toggleH1Only() {
                    if (btnH1Only.getHTML() == "Show H1 Only") {
                        btnH1Only.innerHTML = 'Show ALL';
                        $('h1').addClass('font-size-normal');
                        showH1Only();
                    } else {
                        location.reload();
                    }
                }

                //https://stackoverflow.com/questions/43333286/uncaught-referenceerror-jspdf-is-not-defined
                //https://github.com/parallax/jsPDF?tab=readme-ov-file
                //https://phppot.com/javascript/html-to-pdf-in-javascript-using-jspdf/
                function convert2PDF() {
                    $('#btnPDF').html('...');
                    doc_PlainFormat();

                    const { jsPDF } = window.jspdf;
                    var doc = new jsPDF('l', 'mm', [1200, 1210]);
                    var pdfjs = document.querySelector('.markdown-body');
                    var filename = _url.split('/').pop().toLowerCase().replace('.md', '.pdf');

                    // Convert HTML to PDF in JavaScript
                    doc.html(pdfjs, {
                        callback: function (doc) {
                            doc.save(filename);
                            doc_StyleFormat();
                            $('#btnPDF').html('PDF');
                        },
                        x: 10,
                        y: 10
                    });
                }

                function doc_PlainFormat() {
                    var isWrapped = localStorage.getItem(_isWrapped);
                    if (isWrapped == '1') {
                        unWrapWithMdHtml();
                        localStorage.setItem(_isWrapped, '0');
                    }
                }

                function doc_StyleFormat() {
                    var isWrapped = localStorage.getItem(_isWrapped);
                    if (isWrapped != '1') {
                        wrapWithMdHtml();
                        localStorage.setItem(_isWrapped, '1');
                    }
                }


                // When button `Wrap with md.htm` is clicked, you do some css changes+DOM changes
                function wrapWithMdHtml() {
                    // wrap xxx.md file line
                    $('a').each(function () {
                        var oldUrl = $(this).attr("href");
                        if (oldUrl.endsWith(".md") && oldUrl.includes('127.0.0.1')) {
                            // href to md files
                            var newUrl = oldUrl.replace("127.0.0.1:" + window.location.port + "/./", "127.0.0.1:" + window.location.port + "/md/md.htm?src=../");
                            var newUrl = newUrl.replace("127.0.0.1:" + window.location.port + "/_LoadingDocuments/", "127.0.0.1:" + window.location.port + "/md/md.htm?src=../_LoadingDocuments/");
                            $(this).attr("href", newUrl);
                            //$(this).attr('target', '_blank'); // open in current page
                        } else {
                            // all other general href
                            $(this).attr('target', '_blank');
                        }
                    });

                    // get image width and height from source
                    const getMeta = (url, cb) => {
                        const img = new Image();
                        img.onload = () => cb(null, img);
                        img.onerror = (err) => cb(err);
                        img.src = url;
                    };

                    // wrap each img tag with hyperlink
                    $('img').addClass('sm');

                    var Photos = "";
                    $('img.sm').each(function () {
                        getMeta(this.src, (err, img) => {
                            if (img != undefined) {
                                // console.log('img width/height:', img.naturalWidth, img.naturalHeight);

                                if (img.naturalWidth < 200) {
                                    // really small img >> keep original width
                                    $(this).removeClass('sm');
                                }

                                var newLink = $("<a />", {
                                    href: this.src
                                });
                                newLink.attr('data-pswp-width', img.naturalWidth);
                                newLink.attr('data-pswp-height', img.naturalHeight);
                                newLink.addClass('photoswipe');

                                newLink.append($(this).clone());
                                $(this).replaceWith(newLink);
                            }
                        });
                    });


                    // img click event > replaced by photoswipe
                    // $(document).on('click', 'img.sm', function () {
                    //     window.open(this.src, '_blank');
                    // });

                    btnWrapIt.textContent = "Unwrap links"
                    btnWrapIt.classList.add('btn-warning');
                    btnWrapIt.classList.remove('btn-primary');
                }


                function unWrapWithMdHtml() {
                    $('a').each(function () {
                        var oldUrl = $(this).attr("href");
                        var newUrl = oldUrl.replace("/md/md.htm?src=..", "");
                        $(this).attr("href", newUrl);
                        $(this).attr("target", "_blank");   //open in new tab, 2/11/23
                    });

                    $('img').removeClass('sm');

                    btnWrapIt.textContent = "Wrap with md.html"
                    btnWrapIt.classList.remove('btn-warning');
                    btnWrapIt.classList.add('btn-primary');
                }

                function fnIsRootPage() {
                    var isRootPage = false;
                    if (app.src.toLowerCase() == indexMdFile) {
                        isRootPage = true;
                    }
                    return isRootPage;
                }
            }

            run()

        } //window.load
    </script>

    <!-- moh, 24/6/24. Scripts that can be handled by pure jQuery, and not needed to be inside window.load -->
    <script>
        $(document).ready(function () {
            console.log('history:', getHistoryArray());
        });

        $(window).on('load', function () {
            //dom not only ready, but everything is loaded
        });

        $(document).on('click', 'a', function () {
            var href = $(this).prop('href');
            if (href.includes('.md')) {
                addHistoryItem(href);
            }
        });

        // MOH, 15/7/25, hotkey for image folder. No error, but not working.
        $(document).on('click', '.btn-image-folder', function () {
            console.log('btn-image-folder clicked');
            // Simulate Ctrl+Caps key combination
            simulateCtrlCaps();
        });


        // Convert top to below to trigger 404 error
        // filePath:    ../_LoadingDocuments/./aws-file-upload-jubo.md
        // urlMdHtm:    http://127.0.0.1:5500/md/md.htm?src=../_LoadingDocuments/./aws-file-upload-jubo.md
        // urlOrg:      http://127.0.0.1:5500/../_LoadingDocuments/./aws-file-upload-jubo.md

        function UrlExists(filePath) {
            console.log('filePath:', filePath);

            var urlMdHtm = window.location.href;
            // Fix: Construct proper URL with hostname and port
            var baseUrl = window.location.protocol + '//' + window.location.host;
            var urlOrg = baseUrl + '/' + filePath;

            console.log('urlMdHtm:', urlMdHtm);
            console.log('urlOrg:', urlOrg);

            // check file exists with urlOrg
            //`urlMdHtm` cannot be used to check file exists, it will not raise error because md.htm is valid url.
            var http = new XMLHttpRequest();
            http.open('HEAD', urlOrg, false);
            http.send();
            console.log('http.status:', http.status);

            if (http.status == 404) {
                alert('file not found: ' + urlOrg);
            }
            else {
                return true;
            }
        }

        // delete local storage
        function RemoveHistoryItem() {
            localStorage.removeItem(_clickHistory);
            location.reload();
        }

        // Show all local storage
        // https://stackoverflow.com/questions/17745292/how-to-retrieve-all-localstorage-items-without-knowing-the-keys-in-advance

        function allStorage() {
            var archive = [],
                keys = Object.keys(localStorage),
                i = 0, key;
            for (; key = keys[i]; i++) {
                archive.push(key + '=' + localStorage.getItem(key));
            }
            return archive;
        }

        function addHistoryItem(tmpHref) {
            // Check if tmpHref contains 127.0.0.1
            if (!tmpHref.includes('127.0.0.1')) {
                return false;
            }

            var array = getHistoryArray();
            removeItemAll(array, tmpHref);

            console.log('array2:', array);

            // add to end
            array.push(tmpHref);

            //Task last 5 items only
            var newArray = array.slice(-5);
            localStorage.setItem(_clickHistory, newArray.toString());
        }

        function removeItemAll(arr, value) {
            var i = 0;
            while (i < arr.length) {
                if (arr[i] === value) {
                    arr.splice(i, 1);
                } else {
                    ++i;
                }
            }
            return arr;
        }

        function getHistoryArray() {
            var strArray = localStorage.getItem(_clickHistory);
            var array = [];
            if (strArray != null) {
                array = strArray.split(',').map(function (item) {
                    return item;
                });
            }
            return array;
        }

        function getHistoryArrayHtml() {
            var div = '<div>';
            var array = getHistoryArray();

            for (var i = 0; i < array.length; i++) {
                var url = array[i];
                var filename = url.split('/').pop();
                div = div + `<li><a href="${url}">${filename}</li>`;
            }
            div = div + '</div>';
            return div;
        }

        /* hotkeys: Ctrl+CapsLock */

        function simulateCtrlCaps() {
            // Create and dispatch the keydown event
            const keydownEvent = new KeyboardEvent('keydown', {
                key: 'CapsLock',
                code: 'CapsLock',
                ctrlKey: true,
                bubbles: true,
                cancelable: true
            });

            // Create and dispatch the keyup event
            const keyupEvent = new KeyboardEvent('keyup', {
                key: 'CapsLock',
                code: 'CapsLock',
                ctrlKey: true,
                bubbles: true,
                cancelable: true
            });

            // Dispatch events
            document.dispatchEvent(keydownEvent);
            document.dispatchEvent(keyupEvent);

        }

        // Listen for the simulated event
        document.addEventListener('keydown', function (e) {
            if (e.ctrlKey && e.key === 'CapsLock') {
                console.log('Ctrl+Caps detected!');
                // Your custom logic here
            }
        });
    </script>

</html>