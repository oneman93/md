<!-- 
    See documentation md.htm.md
-->
<html lang="en-us">

    <head>
        <script type="module" src="https://cdn.jsdelivr.net/gh/zerodevx/zero-md@2/dist/zero-md.min.js"></script>

        <!-- Todo: convert to local cdn -->
        <!-- <script src="./md/zero-md-main/dist/zero-md.min.js"></script> -->

        <script src="https://code.jquery.com/jquery-3.6.1.min.js"
            integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
        <link rel="stylesheet" href="md-custom.css" />

        <!-- These two stylesheets were created by zero-md dynamically under shadow root: #shadow-root
        I copied here manually to use with <zero-md-clone></zero-md-clone> -->

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/PrismJS/prism@1/themes/prism.min.css">

        <meta charset="utf-8">
        <title>md.htm</title>
        <link rel="icon" type="image/x-icon" href="/md/images/favicon.png">

    </head>

    <body>
        <div class="search-wrapper mb-5">
            <input id="inputSearch" type="text" placeholder="type to search..." />
            <button id="btnReset" type="button" class="btn btn-primary btn-sm">Reset</button>
        </div>
        <div style="width:70%; margin:0 auto; margin-top: 50px;" id="mdcontainer">
        </div>
    </body>

    <script>
        function getQuery(key) {
            var query = window.location.search.substring(1);
            var key_values = query.split("&");
            var params = {};
            key_values.map(function (key_val) {
                var key_val_arr = key_val.split("=");
                params[key_val_arr[0]] = key_val_arr[1];
            });
            if (typeof params[key] != "undefined") {
                return params[key];
            }
            return "";
        }



        window.onload = function () {
            md = document.createElement("zero-md")
            md.setAttribute("src", getQuery("src"))
            md.setAttribute("no-shadow", "")
            document.getElementById("mdcontainer").append(md)

            // my code trial begins ----
            const app = document.querySelector('zero-md')
            const run = async () => {
                console.log('app.src: ', app.src);

                if (app.src == '') {
                    app.src = '../_work_index.md';
                }

                // Without this line, clone was not working.
                await app.render({
                    // The class `line-numbers` will be added to the markdown-body container
                    classes: 'line-numbers',
                    // These are Marked options (moh, 13/12/22, commented to render table correclty.)
                    // gfm: false,
                    // mangle: false
                })

                // Uncomment below to see original DOM tags right after zero-md.
                //return;

                //-----------------------------
                // Clone starts from here
                //-----------------------------                

                var mdStyle = app.shadowRoot.childNodes[0];
                var mdBody = app.shadowRoot.childNodes[1];
                console.log('mdBody:', mdBody);

                // Add keyup etc event listener
                const inputSearch = document.getElementById("inputSearch");
                const btnReset = document.getElementById("btnReset");
                inputSearch.addEventListener("keyup", searchText);
                btnReset.addEventListener("click", resetText);

                //-----------------------------
                // Move html elements to clone node because you cannot play shadow doms with jQuery
                //-----------------------------
                $(app).addClass('invisible');
                mdClone = document.createElement("zero-md-clone");

                //mdClone.append(mdBody);

                var div = changeBody();
                mdClone.append(div);

                document.getElementById("mdcontainer").append(mdClone);

                //---------------
                // Page Load
                //----------------

                inputSearch.focus();

                // Retrieve search text on page load
                inputSearch.value = localStorage.getItem("search-text");
                searchText();

                var strNth = localStorage.getItem("expanded-nth");
                console.log('strNth:', strNth);

                if (strNth != null) {
                    var nthArray = strNth.split(',');
                    nthArray.forEach(expandFunction)

                    function expandFunction(item) {
                        var selector = '.h1-wrapper:nth-child(#n)'.replace('#n', parseInt(item));
                        console.log('selector:', selector);

                        var btn = $(selector).find('.btn-sm');
                        if (btn.length) {
                            btn.click();
                        }
                    }

                }

                //-----------------------
                // FUNCTIONS
                //-----------------------

                // Change mdBody structure nested from plain
                // Before: <h1/> <ul/> <h2/> <h1/>
                // After: <h1><ul<h2></h1> <h1></h1>
                function changeBody() {
                    // To help search result better, add some css class for h1, h2
                    console.log('length', $(mdBody).find('h1').length);

                    var divAll = document.createElement("div");
                    divAll.className = 'all';

                    $(mdBody).find('h1').each(function () {
                        var h1Wrapper = document.createElement("div");
                        h1Wrapper.className = 'h1-wrapper';

                        var clone = this.cloneNode(true);       //without clone, append was making messy
                        h1Wrapper.append(clone);

                        $(this).nextUntil('h1').each(function () {
                            clone = this.cloneNode(true);
                            h1Wrapper.append(clone);
                        });
                        divAll.append(h1Wrapper);
                    });

                    console.log('all', divAll);
                    return divAll;
                }

                //---------------------
                // On keyup, search    
                //---------------------             
                function searchText() {
                    $('.btn-sm').not('#btnReset').remove();

                    var input, filter, ul, tags, a, i, txtValue, elem;
                    filter = inputSearch.value.toUpperCase();

                    // Set Item (otherwise, chrome refreshes it.)
                    localStorage.setItem("search-text", filter);

                    if (filter == "") {
                        // Reset button
                        $('[style*="display: none"]').slideDown();
                        $('.btn-sm').not('#btnReset').remove();
                        return;
                    }

                    // Todo: make it better to: 
                    // (1) show entire h1 paragraph by adding 'Show all' button to h1, h2, ul 
                    // (2) higlight text
                    tags = mdClone.querySelectorAll("h1,h2,li");

                    // All other tags will be hidden unless filter is reset to "".
                    var otherTags = mdClone.querySelectorAll("table,pre");
                    $(otherTags).hide();

                    console.log('tags length: ', tags.length);
                    for (i = 0; i < tags.length; i++) {
                        elem = tags[i];
                        var elemTagName = elem.tagName;
                        txtValue = elem.textContent || elem.innerText;
                        var searchMatching = txtValue.toUpperCase().indexOf(filter) >= 0;

                        if (searchMatching) {
                            //$(elem).addClass('highlight');
                            console.log('txtValue', txtValue);
                            var div = $(elem).closest('.h1-wrapper');

                            // elem is matching with search criteria
                            $(elem).slideDown();
                            if (elemTagName != "H1") {
                                // h2, li matching
                                var h1 = div.find('h1');
                                if (!h1.is(':visible')) {
                                    h1.show();
                                }
                            }

                            // Show button
                            var btnExpand = div.find('.btn-sm');


                            //------------------
                            // btnExpand
                            //------------------
                            if (btnExpand.length <= 0) {
                                // if button does not exist, create one.
                                let btn = document.createElement('button');
                                btn.innerHTML = "Expand";
                                btn.classList.add("btn", "btn-sm", "btn-expand", "btn-success");  // green expand button
                                btn.addEventListener("click", function () {

                                    var isExpand = this.innerHTML == 'Expand';
                                    console.log('isExpand', isExpand);
                                    console.log('yo, li');
                                    // find more than one level
                                    // https://stackoverflow.com/questions/7648761/how-to-select-all-children-in-any-level-from-a-parent-in-jquery

                                    // Have to define again here.
                                    var div = $(this).closest('.h1-wrapper');
                                    var children = div.find('*');
                                    console.log('children', children.length);

                                    //https://stackoverflow.com/questions/13550079/how-to-find-nth-element-when-a-click-is-activated
                                    var divs = $('.h1-wrapper');
                                    var divIndex = divs.index(div);

                                    if (isExpand) {
                                        // Expand button clicked
                                        children.slideDown();
                                        btn.innerHTML = 'Collapse';
                                        btn.classList.remove('btn-success');
                                        btn.classList.add('btn-danger');

                                        var strArray = localStorage.getItem("expanded-nth");
                                        var array = [];
                                        if (strArray != null) {
                                            array = strArray.split(',').map(function (item) {
                                                return parseInt(item, 10);
                                            });
                                        }
                                        console.log('array:', array);
                                        console.log('divIndex:', divIndex);

                                        var nth = divIndex + 1;
                                        if (!array.includes(nth)) {
                                            array.push(nth);
                                            localStorage.setItem("expanded-nth", array.toString());
                                        }

                                    } else {
                                        // Collapse button clicked
                                        searchText();
                                        btn.innerHTML = 'Expand';
                                        btn.classList.add('btn-success');
                                        btn.classList.remove('btn-danger');

                                        localStorage.removeItem("expanded-nth");
                                    }
                                });
                                div.find('h1').append(btn);
                            }

                        } else {
                            // elem doesn't contain search string
                            $(elem).hide();
                        }
                    }
                }

                function resetText() {
                    inputSearch.value = "";
                    searchText();
                }

                function insertAfter(referenceNode, newNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }
            }

            run()

        } //window.load
    </script>

</html>