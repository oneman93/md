<!-- 
    See documentation md.htm.md
-->
<html lang="en-us">

    <head>
        <script type="module" src="https://cdn.jsdelivr.net/gh/zerodevx/zero-md@2/dist/zero-md.min.js"></script>

        <!-- Todo: convert to local cdn -->
        <!-- <script src="./md/zero-md-main/dist/zero-md.min.js"></script> -->

        <script src="https://code.jquery.com/jquery-3.6.1.min.js"
            integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>

        <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"> -->

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
            integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">


        <link rel="stylesheet" href="md-custom.css" />
        <link rel="stylesheet" href="github.css" />

        <!-- These two stylesheets were created by zero-md dynamically under shadow root: #shadow-root
        I copied here manually to use with <zero-md-clone></zero-md-clone> -->

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/PrismJS/prism@1/themes/prism.min.css">

        <!-- fontawsome -->
        <script src="https://kit.fontawesome.com/33b67b9684.js" crossorigin="anonymous"></script>

        <meta charset="utf-8">
        <title>md.htm</title>
        <link rel="icon" type="image/x-icon" href="/md/images/favicon.png">

        <!-- photo swipe -->
        <script type="module">
            import PhotoSwipeLightbox from './dist/photoswipe-lightbox.esm.js';

            const options = {
                gallery: '#mdcontainer',
                children: 'a.photoswipe',
                pswpModule: () => import('./dist/photoswipe.esm.js')
            };
            const lightbox = new PhotoSwipeLightbox(options);
            lightbox.on('uiRegister', function () {
                lightbox.pswp.ui.registerElement({
                    name: 'custom-caption',
                    order: 9,
                    isButton: false,
                    appendTo: 'root',
                    html: 'Caption text',
                    onInit: (el, pswp) => {
                        lightbox.pswp.on('change', () => {
                            const currSlideElement = lightbox.pswp.currSlide.data.element;
                            let captionHTML = '';
                            if (currSlideElement) {
                                const hiddenCaption = currSlideElement.querySelector('.hidden-caption-content');
                                if (hiddenCaption) {
                                    // get caption from element with class hidden-caption-content
                                    captionHTML = hiddenCaption.innerHTML;
                                } else {
                                    // get caption from alt attribute
                                    captionHTML = currSlideElement.querySelector('img').getAttribute('title');
                                }
                            }
                            el.innerHTML = captionHTML || '';
                        });
                    }
                });
            });
            lightbox.init();
        </script>

        <link rel="stylesheet" href="./dist/photoswipe.css">

        <!-- jspdf -->
        <script src="./dist/jspdf/jspdf-251.js"></script>
        <script src="./dist/jspdf/html2canvas.js"></script>

    </head>

    <body>
        <div class="search-wrapper d-flex justify-content-between">
            <DIV id="divLeft">
                <input id="inputSearch" type="text" placeholder="type to search..." />
                <button id="btnReset" type="button" class="btn btn-primary btn-sm">Reset</button>
                <button id="btnHome" type="button" class="btn btn-danger btn-sm">
                    <span style="font-size: 1em;color:white;"><i class="fa-solid fa-house"></i></span>
                    Go Home</button>


            </DIV>
            <DIV id="divRight">


                <a id="btnLocalVideos" type="button" class="btn btn-info btn-sm"
                    href="https://laureateaus-my.sharepoint.com/personal/matthew_oh_torrens_edu_au/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fmatthew%5Foh%5Ftorrens%5Fedu%5Fau%2FDocuments%2FLocalVideos&view=0">
                    Local Videos</a>

                <button id="btnWrapIt" type="button" class="btn btn-primary btn-sm">Wrap with md.htm</button>
                <button id="btnCopy" type="button" class="btn btn-primary btn-sm"
                    onclick="CopyHTMLToClipboard()">Copy</button>
                <button id="btnCopied" type="button" class="btn btn-outline-success btn-sm"
                    style="display: none;">Copied!</button>
                <button id="btnPDF" type="button" class="btn btn-dark btn-sm">PDF</button>
            </DIV>

        </div>

        <div id="mdcontainer" style="width:70%; margin:0 auto; margin-top: 50px;">
            <!-- shadow dom will be cloned here -->
        </div>



    </body>

    <script>
        var specialElementHandlers = {
            '#editor': function (element, renderer) {
                return true;
            }
        };


        //https://stackoverflow.com/questions/12982156/select-copy-text-using-javascript-or-jquery
        function CopyHTMLToClipboard() {
            //Before we copy, we are going to select the text.
            var text = document.getElementById('mdcontainer');
            var selection = window.getSelection();
            var range = document.createRange();
            range.selectNodeContents(text);
            selection.removeAllRanges();
            selection.addRange(range);
            //add to clipboard.
            document.execCommand('copy');
            document.execCommand("UnSelect", true);
            $('#btnCopied').show().fadeOut('slow');
        }

        function getQuery(key) {
            var query = window.location.search.substring(1);
            var key_values = query.split("&");
            var params = {};
            key_values.map(function (key_val) {
                var key_val_arr = key_val.split("=");
                params[key_val_arr[0]] = key_val_arr[1];
            });
            if (typeof params[key] != "undefined") {
                return params[key];
            }
            return "";
        }

        // Prevent chrome auto page refresh
        // https://stackoverflow.com/questions/58118286/how-to-prevent-page-refresh-or-default-prompt-box-in-chrome
        // 2/11/23, Disabled to remove Leave Site? popup.
        // https://superuser.com/questions/705307/how-can-i-disable-are-you-sure-you-want-to-leave-this-page-popups-in-chrome

        // window.addEventListener("beforeunload", function (e) {
        //     // Do something
        //     console.log('chrome auto refresh blocked.');
        //     e.preventDefault();
        // }, false);

        window.onload = function () {
            md = document.createElement("zero-md")
            md.setAttribute("src", getQuery("src"))
            md.setAttribute("no-shadow", "")
            document.getElementById("mdcontainer").append(md)

            // my code trial begins ----
            const app = document.querySelector('zero-md')
            const run = async () => {

                const _url = window.location.href;
                console.log('app.src: ', app.src);

                if (app.src == '') {
                    app.src = '../_work_index.md';
                }

                var isRootPage = false;
                if (app.src.toLowerCase() == '../_work_index.md') {
                    isRootPage = true;

                    $('#btnHome').addClass('invisible');
                    const homeIcon = '<span style="font-size: 1em;color:blue;"><i class="fa-solid fa-house"></i></span>';
                    $('#divLeft').append(homeIcon);
                    $('#mdcontainer').addClass('work-index');
                }

                document.title = app.src.toLowerCase().replace('../', '').replace('./', '').replace('_loadingdocuments/', '');


                console.log('isRootPage:', isRootPage, ',app.src:', app.src);

                // Without this line, clone was not working.
                await app.render({
                    // The class `line-numbers` will be added to the markdown-body container
                    classes: 'line-numbers',
                    // These are Marked options (moh, 13/12/22, commented to render table correclty.)
                    // gfm: false,
                    // mangle: false
                })

                // Uncomment below to see original DOM tags right after zero-md.
                //return;

                //-----------------------------
                // Clone starts from here
                //-----------------------------                

                var mdStyle = app.shadowRoot.childNodes[0];
                var mdBody = app.shadowRoot.childNodes[1];
                console.log('mdBody:', mdBody);

                // Add keyup etc event listener
                const inputSearch = document.getElementById("inputSearch");
                const btnHome = document.getElementById("btnHome");
                const btnReset = document.getElementById("btnReset");
                const btnWrapIt = document.getElementById("btnWrapIt");
                const btnPDF = document.getElementById("btnPDF");

                inputSearch.addEventListener("keyup", searchText);

                btnHome.addEventListener("click", goHome);
                btnReset.addEventListener("click", resetText);
                btnWrapIt.addEventListener("click", toggleWrap);
                btnPDF.addEventListener("click", convert2PDF);

                //-----------------------------
                // ChangeBody: move html elements to clone node because you cannot play shadow doms with jQuery
                //-----------------------------
                // debugger;
                // Hide zero-md
                $(app).addClass('invisible');
                mdClone = document.createElement("zero-md-clone");

                //mdClone.append(mdBody);
                var div = changeBody();
                mdClone.append(div);
                document.getElementById("mdcontainer").append(mdClone);
                // Now it shows zero-md-clone

                //---------------
                // Page Load
                //----------------
                // To use bootstrap/github css + apply custom css
                $('table').addClass('table');
                $('div.all').addClass('markdown-body');
                applyCustomCss();

                inputSearch.focus();

                // Retrieve search text on page load
                inputSearch.value = localStorage.getItem("search-text");
                if (isRootPage) {
                    // Apply filter only in root page.
                    searchText();
                }

                // Button `Wrap with md.htm` clicked already?
                var isWrapped = localStorage.getItem("is-wrapped");
                if (isWrapped == "1") {
                    wrapWithMdHtml();
                }

                var strNth = localStorage.getItem("expanded-nth");
                console.log('strNth:', strNth);

                if (strNth != null) {
                    var nthArray = strNth.split(',');
                    nthArray.forEach(expandFunction)

                    function expandFunction(item) {
                        var selector = '.h1-wrapper:nth-child(#n)'.replace('#n', parseInt(item));
                        console.log('selector:', selector);

                        var btn = $(selector).find('.btn-sm');
                        if (btn.length) {
                            btn.click();
                        }
                    }

                }

                //-----------------------
                // FUNCTIONS
                //-----------------------

                // Change mdBody structure nested from plain
                // Before: <h1/> <ul/> <h2/> <h1/>
                // After: <h1><ul/><h2></h1> <h1></h1>
                function changeBody() {
                    // To help search result better, add some css class for h1, h2
                    console.log('length', $(mdBody).find('h1').length);

                    var divAll = document.createElement("div");
                    divAll.classList.add('all');

                    // `Document start ~ first h1` was not be shown in <zero-md-clone>
                    var noTagElems = $(mdBody).html().split('<h1')[0];
                    if (noTagElems.length > 0 && !noTagElems.startsWith('<h1')) {
                        //console.log('noTagElems:', noTagElems);

                        var h1Wrapper = document.createElement("div");
                        h1Wrapper.className = 'h1-wrapper';
                        h1Wrapper.innerHTML = '<h1>Summary</h1>' + noTagElems;
                        if (fnIsRootPage()) {
                            h1Wrapper.innerHTML = '<h1>Recently worked on ...</h1>' + noTagElems;
                        }
                        divAll.append(h1Wrapper);
                    }

                    // The entire document will be restructured by <h1> tag.
                    $(mdBody).find('h1').each(function () {
                        var h1Wrapper = document.createElement("div");
                        h1Wrapper.className = 'h1-wrapper';

                        var clone = this.cloneNode(true);       //add current h1 into div.h1-wrapper
                        h1Wrapper.append(clone);

                        // add all the following elems until next h1 into div.h1-wrapper
                        $(this).nextUntil('h1').each(function () {
                            clone = this.cloneNode(true);
                            h1Wrapper.append(clone);
                        });
                        divAll.append(h1Wrapper);
                    });

                    console.log('all', divAll);
                    return divAll;
                }

                function applyCustomCss() {
                    $('a').each(function () {
                        var txtOrg = $(this).text();
                        if (txtOrg.toLowerCase().indexOf("loading") >= 0) {
                            // add green css
                            var txtReplaced = txtOrg.toLowerCase().replace('loading', '<span class="green">loading</span>');
                            $(this).html(txtReplaced);
                        }
                    });

                }

                //---------------------
                // On keyup, search    
                //---------------------             
                function searchText() {

                    if (!fnIsRootPage()) return;

                    var input, filter, ul, tags, a, i, txtValue, elem;
                    filter = inputSearch.value.toUpperCase();

                    // Set Item (otherwise, chrome refreshes it.)
                    localStorage.setItem("search-text", filter);

                    if (filter == "") {
                        // Reset button clicked >> show all content
                        $('#mdcontainer').find('[style*="display: none"]').slideDown();
                        $('.btn-expand').remove();
                        return;
                    }

                    // Todo: make it better to: 
                    // (1) show entire h1 paragraph by adding 'Show all' button to h1, h2, ul 
                    // (2) higlight text
                    tags = mdClone.querySelectorAll("h1,h2,li");

                    // All other tags will be hidden unless filter is reset to "".
                    var otherTags = mdClone.querySelectorAll("table,pre");
                    $(otherTags).hide();

                    console.log('tags length: ', tags.length);
                    for (i = 0; i < tags.length; i++) {
                        elem = tags[i];
                        var elemTagName = elem.tagName;
                        txtValue = elem.textContent || elem.innerText;
                        var searchMatching = txtValue.toUpperCase().indexOf(filter) >= 0;

                        if (searchMatching) {
                            //$(elem).addClass('highlight');
                            console.log('txtValue', txtValue);
                            var div = $(elem).closest('.h1-wrapper');

                            // elem is matching with search criteria
                            $(elem).slideDown();
                            if (elemTagName != "H1") {
                                // h2, li matching
                                var h1 = div.find('h1');
                                if (!h1.is(':visible')) {
                                    h1.show();
                                }
                            }

                            // Show button
                            var btnExpand = div.find('.btn-sm');


                            //------------------
                            // btnExpand
                            //------------------
                            if (btnExpand.length <= 0) {
                                // if button does not exist, create one.
                                let btn = document.createElement('button');
                                btn.innerHTML = "Expand";
                                btn.classList.add("btn", "btn-sm", "btn-expand", "btn-success");  // green expand button
                                btn.addEventListener("click", function () {

                                    var isExpand = this.innerHTML == 'Expand';
                                    console.log('isExpand', isExpand);
                                    console.log('yo, li');
                                    // find more than one level
                                    // https://stackoverflow.com/questions/7648761/how-to-select-all-children-in-any-level-from-a-parent-in-jquery

                                    // Have to define again here.
                                    var div = $(this).closest('.h1-wrapper');
                                    var children = div.find('*');
                                    console.log('children', children.length);

                                    //https://stackoverflow.com/questions/13550079/how-to-find-nth-element-when-a-click-is-activated
                                    var divs = $('.h1-wrapper');
                                    var divIndex = divs.index(div);

                                    if (isExpand) {
                                        // Expand button clicked
                                        children.slideDown();
                                        btn.innerHTML = 'Collapse';
                                        btn.classList.remove('btn-success');
                                        btn.classList.add('btn-danger');

                                        var strArray = localStorage.getItem("expanded-nth");
                                        var array = [];
                                        if (strArray != null) {
                                            array = strArray.split(',').map(function (item) {
                                                return parseInt(item, 10);
                                            });
                                        }
                                        console.log('array:', array);
                                        console.log('divIndex:', divIndex);

                                        var nth = divIndex + 1;
                                        if (!array.includes(nth)) {
                                            array.push(nth);
                                            localStorage.setItem("expanded-nth", array.toString());
                                        }

                                    } else {
                                        // Collapse button clicked
                                        searchText();
                                        btn.innerHTML = 'Expand';
                                        btn.classList.add('btn-success');
                                        btn.classList.remove('btn-danger');

                                        localStorage.removeItem("expanded-nth");
                                    }
                                });
                                div.find('h1').append(btn);
                            }

                        } else {
                            // elem doesn't contain search string
                            $(elem).hide();
                        }
                    }
                }

                function resetText() {
                    inputSearch.value = "";
                    searchText();
                }

                function goHome() {
                    // moh, 21/5/24, not understand the purpose of below two lines. I want to keep filtering when going home. commented.
                    // localStorage.removeItem('search-text');
                    // inputSearch.value = localStorage.getItem("search-text");
                    location.href = 'http://127.0.0.1:5500/md/md.htm';
                }

                function copyToClipboard() {
                    //https://webdeveloper.com/community/60349-is-there-a-way-to-simulate-ctrl-a-ctrl-c-in-javascript/
                    document.execCommand("SelectAll", true);
                    document.execCommand("Copy", true);
                    // document.execCommand("UnSelect", true);
                    alert('Copied');
                }

                function insertAfter(referenceNode, newNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }

                function toggleWrap() {
                    var isWrapped = localStorage.getItem('is-wrapped');
                    if (isWrapped != '1') {
                        wrapWithMdHtml();
                        localStorage.setItem('is-wrapped', '1');
                    } else {
                        unWrapWithMdHtml();
                        localStorage.setItem('is-wrapped', '0');
                    }
                }

                //https://stackoverflow.com/questions/43333286/uncaught-referenceerror-jspdf-is-not-defined
                //https://github.com/parallax/jsPDF?tab=readme-ov-file
                //https://phppot.com/javascript/html-to-pdf-in-javascript-using-jspdf/
                function convert2PDF() {
                    $('#btnPDF').html('...');
                    doc_PlainFormat();

                    const { jsPDF } = window.jspdf;
                    var doc = new jsPDF('l', 'mm', [1200, 1210]);
                    var pdfjs = document.querySelector('.markdown-body');
                    var filename = _url.split('/').pop().toLowerCase().replace('.md', '.pdf');

                    // Convert HTML to PDF in JavaScript
                    doc.html(pdfjs, {
                        callback: function (doc) {
                            doc.save(filename);
                            doc_StyleFormat();
                            $('#btnPDF').html('PDF');
                        },
                        x: 10,
                        y: 10
                    });
                }

                function doc_PlainFormat() {
                    var isWrapped = localStorage.getItem('is-wrapped');
                    if (isWrapped == '1') {
                        unWrapWithMdHtml();
                        localStorage.setItem('is-wrapped', '0');
                    }
                }

                function doc_StyleFormat() {
                    var isWrapped = localStorage.getItem('is-wrapped');
                    if (isWrapped != '1') {
                        wrapWithMdHtml();
                        localStorage.setItem('is-wrapped', '1');
                    }
                }


                // When button `Wrap with md.htm` is clicked, you do some css changes+DOM changes
                function wrapWithMdHtml() {
                    // wrap xxx.md file line
                    $('a').each(function () {
                        var oldUrl = $(this).attr("href");
                        if (oldUrl.endsWith(".md")) {
                            // href to md files
                            var newUrl = oldUrl.replace("127.0.0.1:5500/./", "127.0.0.1:5500/md/md.htm?src=../");
                            var newUrl = newUrl.replace("127.0.0.1:5500/_LoadingDocuments/", "127.0.0.1:5500/md/md.htm?src=../_LoadingDocuments/");
                            $(this).attr("href", newUrl);
                            //$(this).attr('target', '_blank'); // open in current page
                        } else {
                            // all other general href
                            $(this).attr('target', '_blank');
                        }
                    });

                    // get image width and height from source
                    const getMeta = (url, cb) => {
                        const img = new Image();
                        img.onload = () => cb(null, img);
                        img.onerror = (err) => cb(err);
                        img.src = url;
                    };

                    // wrap each img tag with hyperlink
                    $('img').addClass('sm');

                    var Photos = "";
                    $('img.sm').each(function () {
                        getMeta(this.src, (err, img) => {
                            if (img != undefined) {
                                console.log('img width/height:', img.naturalWidth, img.naturalHeight);

                                if (img.naturalWidth < 200) {
                                    // really small img >> keep original width
                                    $(this).removeClass('sm');
                                }

                                var newLink = $("<a />", {
                                    href: this.src
                                });
                                newLink.attr('data-pswp-width', img.naturalWidth);
                                newLink.attr('data-pswp-height', img.naturalHeight);
                                newLink.addClass('photoswipe');

                                newLink.append($(this).clone());
                                $(this).replaceWith(newLink);
                            }
                        });
                    });


                    // img click event > replaced by photoswipe
                    // $(document).on('click', 'img.sm', function () {
                    //     window.open(this.src, '_blank');
                    // });

                    btnWrapIt.textContent = "Unwrap links"
                    btnWrapIt.classList.add('btn-warning');
                    btnWrapIt.classList.remove('btn-primary');
                }


                function unWrapWithMdHtml() {
                    $('a').each(function () {
                        var oldUrl = $(this).attr("href");
                        var newUrl = oldUrl.replace("/md/md.htm?src=..", "");
                        $(this).attr("href", newUrl);
                        $(this).attr("target", "_blank");   //open in new tab, 2/11/23
                    });

                    $('img').removeClass('sm');

                    btnWrapIt.textContent = "Wrap with md.html"
                    btnWrapIt.classList.remove('btn-warning');
                    btnWrapIt.classList.add('btn-primary');
                }

                function fnIsRootPage() {
                    var isRootPage = false;
                    if (app.src.toLowerCase() == '../_work_index.md') {
                        isRootPage = true;
                    }
                    return isRootPage;
                }
            }

            run()

        } //window.load
    </script>




</html>